//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeToModel.Example {
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.ComponentModel;
	using System.Diagnostics;
	using System.Linq;
	using NMF.Expressions;
	using NMF.Expressions.Linq;
	using NMF.Models;
	using NMF.Models.Meta;
	using NMF.Models.Collections;
	using NMF.Models.Expressions;
	using NMF.Collections.Generic;
	using NMF.Collections.ObjectModel;
	using NMF.Serialization;
	using NMF.Utilities;
	using System.Collections.Specialized;
	using NMF.Models.Repository;
	
	
	/// <summary>
	/// The default implementation of the Sentence class
	/// </summary>
	[XmlNamespaceAttribute("http://github.com/CodeToModel")]
	[XmlNamespacePrefixAttribute("Sentence")]
	[ModelRepresentationClassAttribute(("file:///D:/Tools/Microsoft%20Visual%20Studio/Repos/Code%20First%20Modeling/CodeTo" +
		"Model/Example/Example.nmeta#//Sentence"))]
	public partial class Sentence : ModelElement, ISentence, IModelElement {
		
		private static Lazy<IOperation> _printSentenceOperation = new Lazy<IOperation>(RetrievePrintSentenceOperation);
		
		private static Lazy<IOperation> _wordsAsURIOperation = new Lazy<IOperation>(RetrieveWordsAsURIOperation);
		
		/// <summary>
		/// The backing field for the WordCount property
		/// </summary>
		[DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
		private Nullable<int> _wordCount;
		
		private static Lazy<ITypedElement> _wordCountAttribute = new Lazy<ITypedElement>(RetrieveWordCountAttribute);
		
		private static Lazy<ITypedElement> _wordsReference = new Lazy<ITypedElement>(RetrieveWordsReference);
		
		/// <summary>
		/// The backing field for the Words property
		/// </summary>
		[DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
		private ObservableAssociationList<IWord> _words;
		
		private static Lazy<ITypedElement> _firstWordReference = new Lazy<ITypedElement>(RetrieveFirstWordReference);
		
		/// <summary>
		/// The backing field for the FirstWord property
		/// </summary>
		[DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
		private IWord _firstWord;
		
		private static IClass _classInstance;
		
		/// <summary>
		/// Creates a new instance
		/// </summary>
		public Sentence() {
			this._words = new ObservableAssociationList<IWord>();
			this._words.CollectionChanging += this.WordsCollectionChanging;
			this._words.CollectionChanged += this.WordsCollectionChanged;
		}
		
		/// <summary>
		/// The WordCount property
		/// </summary>
		[CategoryAttribute("Sentence")]
		[XmlAttributeAttribute(true)]
		public Nullable<int> WordCount {
			get {
				return this._wordCount;
			}
			set {
				if ((this._wordCount != value)) {
					Nullable<int> old = this._wordCount;
					ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
					this.OnPropertyChanging("WordCount", e, _wordCountAttribute);
					this._wordCount = value;
					this.OnPropertyChanged("WordCount", e, _wordCountAttribute);
				}
			}
		}
		
		/// <summary>
		/// The Words property
		/// </summary>
		[UpperBoundAttribute(64)]
		[DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
		[CategoryAttribute("Sentence")]
		[XmlAttributeAttribute(true)]
		[ConstantAttribute()]
		public IListExpression<IWord> Words {
			get {
				return this._words;
			}
		}
		
		/// <summary>
		/// The FirstWord property
		/// </summary>
		[CategoryAttribute("Sentence")]
		[XmlAttributeAttribute(true)]
		public IWord FirstWord {
			get {
				return this._firstWord;
			}
			set {
				if ((this._firstWord != value)) {
					IWord old = this._firstWord;
					ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
					this.OnPropertyChanging("FirstWord", e, _firstWordReference);
					this._firstWord = value;
					if ((old != null)) {
						old.Deleted -= this.OnResetFirstWord;
					}
					if ((value != null)) {
						value.Deleted += this.OnResetFirstWord;
					}
					this.OnPropertyChanged("FirstWord", e, _firstWordReference);
				}
			}
		}
		
		/// <summary>
		/// Gets the referenced model elements of this model element
		/// </summary>
		public override IEnumerableExpression<IModelElement> ReferencedElements {
			get {
				return base.ReferencedElements.Concat(new SentenceReferencedElementsCollection(this));
			}
		}
		
		/// <summary>
		/// Gets the Class model for this type
		/// </summary>
		public new static IClass ClassInstance {
			get {
				if ((_classInstance == null)) {
					_classInstance = ((IClass)(MetaRepository.Instance.Resolve(("file:///D:/Tools/Microsoft%20Visual%20Studio/Repos/Code%20First%20Modeling/CodeTo" +
							"Model/Example/Example.nmeta#//Sentence"))));
				}
				return _classInstance;
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="times"></param>
		public void PrintSentence(int times) {
			System.Action<ISentence, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Action<ISentence, int>>(_printSentenceOperation);
			if ((handler != null)) {
			}
			else {
				throw new InvalidOperationException(("There is no implementation for method PrintSentence registered. Use the method br" +
						"oker to register a method implementation."));
			}
			OperationCallEventArgs e = new OperationCallEventArgs(this, _printSentenceOperation.Value, times);
			this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _printSentenceOperation.Value, e));
			handler.Invoke(this, times);
			this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _printSentenceOperation.Value, e));
		}
		
		private static IOperation RetrievePrintSentenceOperation() {
			return ClassInstance.LookupOperation("PrintSentence");
		}
		
		/// <summary>
		/// 
		/// </summary>
		public IWord WordsAsURI() {
			System.Func<ISentence, IWord> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ISentence, IWord>>(_wordsAsURIOperation);
			if ((handler != null)) {
			}
			else {
				throw new InvalidOperationException(("There is no implementation for method WordsAsURI registered. Use the method broke" +
						"r to register a method implementation."));
			}
			OperationCallEventArgs e = new OperationCallEventArgs(this, _wordsAsURIOperation.Value);
			this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _wordsAsURIOperation.Value, e));
			IWord result = handler.Invoke(this);
			e.Result = result;
			this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _wordsAsURIOperation.Value, e));
			return result;
		}
		
		private static IOperation RetrieveWordsAsURIOperation() {
			return ClassInstance.LookupOperation("WordsAsURI");
		}
		
		private static ITypedElement RetrieveWordCountAttribute() {
			return ((ITypedElement)(((ModelElement)(CodeToModel.Example.Sentence.ClassInstance)).Resolve("WordCount")));
		}
		
		private static ITypedElement RetrieveWordsReference() {
			return ((ITypedElement)(((ModelElement)(CodeToModel.Example.Sentence.ClassInstance)).Resolve("Words")));
		}
		
		/// <summary>
		/// Forwards CollectionChanging notifications for the Words property to the parent model element
		/// </summary>
		/// <param name="sender">The collection that raised the change</param>
		/// <param name="e">The original event data</param>
		private void WordsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e) {
			this.OnCollectionChanging("Words", e, _wordsReference);
		}
		
		/// <summary>
		/// Forwards CollectionChanged notifications for the Words property to the parent model element
		/// </summary>
		/// <param name="sender">The collection that raised the change</param>
		/// <param name="e">The original event data</param>
		private void WordsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e) {
			this.OnCollectionChanged("Words", e, _wordsReference);
		}
		
		private static ITypedElement RetrieveFirstWordReference() {
			return ((ITypedElement)(((ModelElement)(CodeToModel.Example.Sentence.ClassInstance)).Resolve("FirstWord")));
		}
		
		/// <summary>
		/// Handles the event that the FirstWord property must reset
		/// </summary>
		/// <param name="sender">The object that sent this reset request</param>
		/// <param name="eventArgs">The event data for the reset event</param>
		private void OnResetFirstWord(object sender, EventArgs eventArgs) {
			if ((sender == this.FirstWord)) {
				this.FirstWord = null;
			}
		}
		
		/// <summary>
		/// Resolves the given URI to a child model element
		/// </summary>
		/// <returns>The model element or null if it could not be found</returns>
		/// <param name="reference">The requested reference name</param>
		/// <param name="index">The index of this reference</param>
		protected override IModelElement GetModelElementForReference(string reference, int index) {
			if ((reference == "WORDS")) {
				if ((index < this.Words.Count)) {
					return this.Words[index];
				}
				else {
					return null;
				}
			}
			if ((reference == "FIRSTWORD")) {
				return this.FirstWord;
			}
			return base.GetModelElementForReference(reference, index);
		}
		
		/// <summary>
		/// Resolves the given attribute name
		/// </summary>
		/// <returns>The attribute value or null if it could not be found</returns>
		/// <param name="attribute">The requested attribute name</param>
		/// <param name="index">The index of this attribute</param>
		protected override object GetAttributeValue(string attribute, int index) {
			if ((attribute == "WORDCOUNT")) {
				return this.WordCount;
			}
			return base.GetAttributeValue(attribute, index);
		}
		
		/// <summary>
		/// Gets the Model element collection for the given feature
		/// </summary>
		/// <returns>A non-generic list of elements</returns>
		/// <param name="feature">The requested feature</param>
		protected override System.Collections.IList GetCollectionForFeature(string feature) {
			if ((feature == "WORDS")) {
				return this._words;
			}
			return base.GetCollectionForFeature(feature);
		}
		
		/// <summary>
		/// Sets a value to the given feature
		/// </summary>
		/// <param name="feature">The requested feature</param>
		/// <param name="value">The value that should be set to that feature</param>
		protected override void SetFeature(string feature, object value) {
			if ((feature == "FIRSTWORD")) {
				this.FirstWord = ((IWord)(value));
				return;
			}
			if ((feature == "WORDCOUNT")) {
				this.WordCount = ((int)(value));
				return;
			}
			base.SetFeature(feature, value);
		}
		
		/// <summary>
		/// Gets the property expression for the given attribute
		/// </summary>
		/// <returns>An incremental property expression</returns>
		/// <param name="attribute">The requested attribute in upper case</param>
		protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute) {
			if ((attribute == "WORDCOUNT")) {
				return Observable.Box(new WordCountProxy(this));
			}
			return base.GetExpressionForAttribute(attribute);
		}
		
		/// <summary>
		/// Gets the property expression for the given reference
		/// </summary>
		/// <returns>An incremental property expression</returns>
		/// <param name="reference">The requested reference in upper case</param>
		protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference) {
			if ((reference == "FIRSTWORD")) {
				return new FirstWordProxy(this);
			}
			return base.GetExpressionForReference(reference);
		}
		
		/// <summary>
		/// Gets the Class for this model element
		/// </summary>
		public override IClass GetClass() {
			if ((_classInstance == null)) {
				_classInstance = ((IClass)(MetaRepository.Instance.Resolve(("file:///D:/Tools/Microsoft%20Visual%20Studio/Repos/Code%20First%20Modeling/CodeTo" +
						"Model/Example/Example.nmeta#//Sentence"))));
			}
			return _classInstance;
		}
		
		/// <summary>
		/// The collection class to to represent the children of the Sentence class
		/// </summary>
		public class SentenceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement> {
			
			private Sentence _parent;
			
			/// <summary>
			/// Creates a new instance
			/// </summary>
			public SentenceReferencedElementsCollection(Sentence parent) {
				this._parent = parent;
			}
			
			/// <summary>
			/// Gets the amount of elements contained in this collection
			/// </summary>
			public override int Count {
				get {
					int count = 0;
					count = (count + this._parent.Words.Count);
					if ((this._parent.FirstWord != null)) {
						count = (count + 1);
					}
					return count;
				}
			}
			
			/// <summary>
			/// Registers event hooks to keep the collection up to date
			/// </summary>
			protected override void AttachCore() {
				this._parent.Words.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
				this._parent.BubbledChange += this.PropagateValueChanges;
			}
			
			/// <summary>
			/// Unregisters all event hooks registered by AttachCore
			/// </summary>
			protected override void DetachCore() {
				this._parent.Words.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
				this._parent.BubbledChange -= this.PropagateValueChanges;
			}
			
			/// <summary>
			/// Adds the given element to the collection
			/// </summary>
			/// <param name="item">The item to add</param>
			public override void Add(IModelElement item) {
				IWord wordsCasted = item.As<IWord>();
				if ((wordsCasted != null)) {
					if ((this._parent.Words.Count < 64)) {
						this._parent.Words.Add(wordsCasted);
					}
				}
				if ((this._parent.FirstWord == null)) {
					IWord firstWordCasted = item.As<IWord>();
					if ((firstWordCasted != null)) {
						this._parent.FirstWord = firstWordCasted;
						return;
					}
				}
			}
			
			/// <summary>
			/// Clears the collection and resets all references that implement it.
			/// </summary>
			public override void Clear() {
				this._parent.Words.Clear();
				this._parent.FirstWord = null;
			}
			
			/// <summary>
			/// Gets a value indicating whether the given element is contained in the collection
			/// </summary>
			/// <returns>True, if it is contained, otherwise False</returns>
			/// <param name="item">The item that should be looked out for</param>
			public override bool Contains(IModelElement item) {
				if (this._parent.Words.Contains(item)) {
					return true;
				}
				if ((item == this._parent.FirstWord)) {
					return true;
				}
				return false;
			}
			
			/// <summary>
			/// Copies the contents of the collection to the given array starting from the given array index
			/// </summary>
			/// <param name="array">The array in which the elements should be copied</param>
			/// <param name="arrayIndex">The starting index</param>
			public override void CopyTo(IModelElement[] array, int arrayIndex) {
				IEnumerator<IModelElement> wordsEnumerator = this._parent.Words.GetEnumerator();
				try {
					for (
					; wordsEnumerator.MoveNext(); 
					) {
						array[arrayIndex] = wordsEnumerator.Current;
						arrayIndex = (arrayIndex + 1);
					}
				}
				finally {
					wordsEnumerator.Dispose();
				}
				if ((this._parent.FirstWord != null)) {
					array[arrayIndex] = this._parent.FirstWord;
					arrayIndex = (arrayIndex + 1);
				}
			}
			
			/// <summary>
			/// Removes the given item from the collection
			/// </summary>
			/// <returns>True, if the item was removed, otherwise False</returns>
			/// <param name="item">The item that should be removed</param>
			public override bool Remove(IModelElement item) {
				IWord wordItem = item.As<IWord>();
				if (((wordItem != null) 
							&& this._parent.Words.Remove(wordItem))) {
					return true;
				}
				if ((this._parent.FirstWord == item)) {
					this._parent.FirstWord = null;
					return true;
				}
				return false;
			}
			
			/// <summary>
			/// Gets an enumerator that enumerates the collection
			/// </summary>
			/// <returns>A generic enumerator</returns>
			public override IEnumerator<IModelElement> GetEnumerator() {
				return Enumerable.Empty<IModelElement>().Concat(this._parent.Words).Concat(this._parent.FirstWord).GetEnumerator();
			}
		}
		
		/// <summary>
		/// Represents a proxy to represent an incremental access to the WordCount property
		/// </summary>
		private sealed class WordCountProxy : ModelPropertyChange<ISentence, Nullable<int>> {
			
			/// <summary>
			/// Creates a new observable property access proxy
			/// </summary>
			/// <param name="modelElement">The model instance element for which to create the property access proxy</param>
			public WordCountProxy(ISentence modelElement) : 
					base(modelElement, "WordCount") {
			}
			
			/// <summary>
			/// Gets or sets the value of this expression
			/// </summary>
			public override Nullable<int> Value {
				get {
					return this.ModelElement.WordCount;
				}
				set {
					this.ModelElement.WordCount = value;
				}
			}
		}
		
		/// <summary>
		/// Represents a proxy to represent an incremental access to the FirstWord property
		/// </summary>
		private sealed class FirstWordProxy : ModelPropertyChange<ISentence, IWord> {
			
			/// <summary>
			/// Creates a new observable property access proxy
			/// </summary>
			/// <param name="modelElement">The model instance element for which to create the property access proxy</param>
			public FirstWordProxy(ISentence modelElement) : 
					base(modelElement, "FirstWord") {
			}
			
			/// <summary>
			/// Gets or sets the value of this expression
			/// </summary>
			public override IWord Value {
				get {
					return this.ModelElement.FirstWord;
				}
				set {
					this.ModelElement.FirstWord = value;
				}
			}
		}
	}
	
	/// <summary>
	/// The default implementation of the Word class
	/// </summary>
	[XmlNamespaceAttribute("http://github.com/CodeToModel")]
	[XmlNamespacePrefixAttribute("Sentence")]
	[ModelRepresentationClassAttribute(("file:///D:/Tools/Microsoft%20Visual%20Studio/Repos/Code%20First%20Modeling/CodeTo" +
		"Model/Example/Example.nmeta#//Word"))]
	public partial class Word : ModelElement, IWord, IModelElement {
		
		/// <summary>
		/// The backing field for the Text property
		/// </summary>
		[DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
		private string _text;
		
		private static Lazy<ITypedElement> _textAttribute = new Lazy<ITypedElement>(RetrieveTextAttribute);
		
		private static IClass _classInstance;
		
		/// <summary>
		/// The Text property
		/// </summary>
		[CategoryAttribute("Word")]
		[XmlAttributeAttribute(true)]
		public string Text {
			get {
				return this._text;
			}
			set {
				if ((this._text != value)) {
					string old = this._text;
					ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
					this.OnPropertyChanging("Text", e, _textAttribute);
					this._text = value;
					this.OnPropertyChanged("Text", e, _textAttribute);
				}
			}
		}
		
		/// <summary>
		/// Gets the Class model for this type
		/// </summary>
		public new static IClass ClassInstance {
			get {
				if ((_classInstance == null)) {
					_classInstance = ((IClass)(MetaRepository.Instance.Resolve(("file:///D:/Tools/Microsoft%20Visual%20Studio/Repos/Code%20First%20Modeling/CodeTo" +
							"Model/Example/Example.nmeta#//Word"))));
				}
				return _classInstance;
			}
		}
		
		private static ITypedElement RetrieveTextAttribute() {
			return ((ITypedElement)(((ModelElement)(CodeToModel.Example.Word.ClassInstance)).Resolve("Text")));
		}
		
		/// <summary>
		/// Resolves the given attribute name
		/// </summary>
		/// <returns>The attribute value or null if it could not be found</returns>
		/// <param name="attribute">The requested attribute name</param>
		/// <param name="index">The index of this attribute</param>
		protected override object GetAttributeValue(string attribute, int index) {
			if ((attribute == "TEXT")) {
				return this.Text;
			}
			return base.GetAttributeValue(attribute, index);
		}
		
		/// <summary>
		/// Sets a value to the given feature
		/// </summary>
		/// <param name="feature">The requested feature</param>
		/// <param name="value">The value that should be set to that feature</param>
		protected override void SetFeature(string feature, object value) {
			if ((feature == "TEXT")) {
				this.Text = ((string)(value));
				return;
			}
			base.SetFeature(feature, value);
		}
		
		/// <summary>
		/// Gets the property expression for the given attribute
		/// </summary>
		/// <returns>An incremental property expression</returns>
		/// <param name="attribute">The requested attribute in upper case</param>
		protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute) {
			if ((attribute == "TEXT")) {
				return new TextProxy(this);
			}
			return base.GetExpressionForAttribute(attribute);
		}
		
		/// <summary>
		/// Gets the Class for this model element
		/// </summary>
		public override IClass GetClass() {
			if ((_classInstance == null)) {
				_classInstance = ((IClass)(MetaRepository.Instance.Resolve(("file:///D:/Tools/Microsoft%20Visual%20Studio/Repos/Code%20First%20Modeling/CodeTo" +
						"Model/Example/Example.nmeta#//Word"))));
			}
			return _classInstance;
		}
		
		/// <summary>
		/// Represents a proxy to represent an incremental access to the Text property
		/// </summary>
		private sealed class TextProxy : ModelPropertyChange<IWord, string> {
			
			/// <summary>
			/// Creates a new observable property access proxy
			/// </summary>
			/// <param name="modelElement">The model instance element for which to create the property access proxy</param>
			public TextProxy(IWord modelElement) : 
					base(modelElement, "Text") {
			}
			
			/// <summary>
			/// Gets or sets the value of this expression
			/// </summary>
			public override string Value {
				get {
					return this.ModelElement.Text;
				}
				set {
					this.ModelElement.Text = value;
				}
			}
		}
	}
	
	/// <summary>
	/// The public interface for Sentence
	/// </summary>
	[DefaultImplementationTypeAttribute(typeof(Sentence))]
	[XmlDefaultImplementationTypeAttribute(typeof(Sentence))]
	[ModelRepresentationClassAttribute(("file:///D:/Tools/Microsoft%20Visual%20Studio/Repos/Code%20First%20Modeling/CodeTo" +
		"Model/Example/Example.nmeta#//Sentence"))]
	public partial interface ISentence : IModelElement {
	}
}
